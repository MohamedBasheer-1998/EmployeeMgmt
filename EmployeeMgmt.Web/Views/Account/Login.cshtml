@model EmployeeMgmt.Application.DTOs.LoginDto

@{
    ViewData["Title"] = "Login";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .login-container {
            display: flex;
            max-width: 1000px;
            width: 100%;
            height: 100%;
            border-radius: 10px;
            overflow: hidden;
        }

        .login-left {
            flex: 1;
            background-image: url('/images/login-background.jpg');
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .login-right {
            flex: 1;
            padding: 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: wheat;
        }

            .login-right h2 {
                margin-bottom: 20px;
                font-size: 36px;
                font-weight: bold;
            }

        .form-group {
            margin-bottom: 20px;
        }

        .btn-primary {
            width: 100%;
            padding: 10px;
        }

        .login-container img {
            max-width: 100%;
            height: auto;
        }

        .text-danger {
            color: red;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-left">
            <img src="/images/rb_18771.png" alt="Logo" />
        </div>
        <div class="login-right">
            <h2>@ViewData["Title"]</h2>

            @if (!string.IsNullOrEmpty(ViewData["Error"] as string))
            {
                <div class="alert alert-danger">
                    @ViewData["Error"]
                </div>
            }

            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

            <form id="loginForm" method="post">
                <div class="form-group">
                    <label for="Username">Username</label>
                    <input type="text" id="Username" name="Username" class="form-control" required />
                </div>

                <div class="form-group">
                    <label for="Password">Password</label>
                    <input type="password" id="Password" name="Password" class="form-control" required />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </form>
        </div>
    </div>

    @section Scripts {
        <script>
            document.getElementById("loginForm").onsubmit = async (e) => {
                e.preventDefault();

                const loginData = {
                    username: document.getElementById("Username").value,
                    password: document.getElementById("Password").value
                };

                const response = await fetch("/api/auth/login", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(loginData)
                });

                const data = await response.json();

                if (response.ok) {
                    alert("Login successful");
                    window.location.href = "/Employee/Index";
                } else {
                    alert(data.message);
                }
            };
        </script>
    }
</body>
</html>
